{
  "guid": "b93d6b84-9812-47e6-ad2a-7a221d5b32fb",
  "name": "Chapter 2 - Where Code Executes",
  "categories": [ "Toolkit/Publication: Data Parallel C++" ],
  "description": "Chapter 02 source code examples: Where Code Executes -- fig_2_2_simple_program.cpp * Figure 2-2. Simple SYCL program  -- fig_2_7_implicit_default_selector.cpp * Figure 2-7. Implicit default device selector through trivial construction of a queue  -- fig_2_9_host_selector.cpp * Figure 2-9. Selecting the host device using the host_selector class -- fig_2_10_cpu_selector.cpp * Figure 2-10. CPU device selector example -- fig_2_12_multiple_selectors.cpp  * Figure 2-12. Example device identification output from various classes of device selectors and demonstration that device selectors can be used for cons -- fig_2_13_gpu_plus_fpga.cpp * Figure 2-13. Creating queues to both GPU and FPGA devices  -- fig_2_15_custom_selector.cpp * Figure 2-15. Custom selector for Intel Arria FPGA device  -- fig_2_18_simple_device_code.cpp * Figure 2-18. Submission of device code  -- fig_2_22_simple_device_code_2.cpp * Figure 2-22. Submission of device code  -- fig_2_23_fallback.cpp * Figure 2-23. Fallback queue example",
  "toolchain": [ "dpcpp" ],
  "languages": [ { "cpp": {} } ],
  "targetDevice": [ "CPU", "GPU" ],
  "os": [ "linux", "windows" ],
  "builder": [ "ide", "cmake" ],
  "commonFolder": {
    "base": "..",
    "include": [
      "Ch02_where_code_runs",
      "LICENSE.txt",
      "README.md",
      "CMakeLists.txt"
    ],
    "exclude": [
      "sample-folder-name/test.sh"
    ]
   },
   "ciTests": {
    "linux": [
      {
        "steps": [
          "mkdir build",
          "cd build",
          "cmake ..",
          "make",
          "make run"
        ]
      }
    ],
    "windows": [
      {
        "steps": [
          "mkdir build",
          "cd build",
          "cmake -G Ninja ..",
          "ninja"
        ]
      }
    ]
  }
}